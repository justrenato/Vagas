c
continue
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.first['score']
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.first[:score]
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.first.score
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.first
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.first[:score]
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.first
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.sort_by{|candidato| candidato[:score] * -1}
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.sort_by{|candidato| candidato[:score]}
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }.sort_by{|candidato| candidato[:score]}
c
@candidatos.map{ |candidato| candidato.attributes.merge(candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score) }
continue
candidato.
candidato
continue
load_map
c
distances
n
distances
n
distance
n
edge_weight
current_distance
distance
n
distance
neighbor
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
nn
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distances
n
distance < distances[neighbor]
distances[neighbor]
current_vertex
neighbor
distances
distance
c
end
c
@vertices
c
@vertices
current_vertex
edge_weight
current_distance
c
current_distance + edge_weight
edge_weight
current_distance
c
@vertices
current_vertex
c
current_vertex.values
current_vertex.keys
current_vertex.key
current_vertex
current_vertex.key
current_vertex.methods
current_vertex
continue
@vertices[current_vertex]
current_vertex
@vertices
c
continue
queue.push 'start', 0
queue.deq
queue.length
queue.num_waiting
queue.methods
queue.deq
queue.enq
queue.num_waiting
queue.marshal_dump
queue.inspect
queue.instance_variable_names
queue.instance_values
queue.size
queue.methods
queue.to_s
queue.to_h
queue.push(start: 0)
queue.push(start, 0)
queue
c
PriorityQueue.new[1] 
queue[1].methods
queue[2]
queue[1]
queue[]
queue.priorities
queue.queues
queue.push
queue.empty?
queue.methods
queue
c
u
c
u
n
u
c
u
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
c
n
continue
c
continue
c
continue
@edges
queue
c
@edges[nil]
@edges
queue.shift
queue
u
@edges
c
s
n
s
n
c
continue
self.vaga_id
self.pessoa_id
se,f
@attributes.to_h
@attributes.fetch_value
@attributes.keys
@attributes.values
@attributes.to_hash
@attributes.attributes
@attributes.keys
@attributes.methods
@attributes[:values][:vaga_id]
@attributes[@values][:vaga_id]
@attributes[@values]
@values
var all
@attributes.values
@attributes
var all
c
l =
self.attributes
self
var all
c
Pessoa.find(self.pessoa_id).nivel
@attributes
var all
var instance
var local
var args
ls
c
a.update_attribute(:score, 5)
a.update_attribute(score: 5)
a.update_attributes(score: 5)
a.update_column(:score, 10)
Candidatura.first
a.save
a.write_attribute(:score, 5)
a.set(score: 5)
Candidatura.first
a
a.save
a.score = 5
a = Candidatura.first
Candidatura.first
Candidatura.first.score = 4
Candidatura.first
@candidatos.map{ |candidato| candidato.attributes.merge({score: candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score}) }
c
@candidatos.map{ |candidato| candidato.attributes.merge(
   10:     	{score: candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score}) }.sort_by{|candidatura| candidatura[:score]}
c
@candidatos.map{ |candidato| candidato.attributes.merge({score: candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score}) }.sort_by{|candidatura| candidatura[:score]}
@candidatos.map{ |candidato| candidato.attributes.merge({score: candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score}) }.sort_by(:score)
@candidatos.map{ |candidato| candidato.attributes.merge({score: candidato.candidaturas.find_by(vaga_id: params[:vaga_id]).score}) }
